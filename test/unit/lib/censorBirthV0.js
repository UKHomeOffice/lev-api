'use strict';
const {censorBirthV0} = require('../../../src/lib/censorRecords');
const roleWithFullAccess = ['full-details'];
const roleWithoutFullAccess = ['death'];

const birthData = {
  location: {
    name: "Registration District, Subdistrict town, Adminshire",
    administrativeArea: "Adminshire",
    subDistrict: "Subdistrict town",
    nameQualifier: "generated by concatenating registrationDistrict, subDistrict and administrativeArea",
    registrationDistrict: "Registration District"
  },
  subjects: {
    child: {
      originalName: {
        givenName: "Inconvenient",
        surname: "Mistake",
        fullName: "Inconvenient Mistake",
        qualifier: "generated from prepending forename to surname"
      },
      name: {
        givenName: "Expensive",
        surname: "Mistake",
        fullName: "Expensive Mistake",
        qualifier: "generated from prepending forename to surname"
      },
      dateOfBirth: "2020-09-23",
      sex: "Male",
      birthplace: "Bath"
    },
    father: {
      name: {
        givenName: "FATHER FORENAME",
        surname: "FATHER SURNAME",
        fullName: "FATHER FORENAME FATHER SURNAME",
        qualifier: "generated from prepending forename to surname"
      },
      birthplace: "BRISTOL",
      occupation: "CLEANER"
    },
    mother: {
      name: {
        givenName: "MOTHER FORENAME",
        surname: "MOTHER SURNAME",
        fullName: "MOTHER FORENAME MOTHER SURNAME",
        qualifier: "generated from prepending forename to surname"
      },
      birthplace: "Exeter",
      occupation: "Teacher",
      maidenSurname: "MAIDEN SURNAME",
      marriageSurname: "MARRIAGE SURNAME",
      usualAddress: "ADDRESS 1"
    },
    informant: {
      name: {
        givenName: "Informant Forename1",
        surname: "Informant1 Surname",
        fullName: "Informant Forename1 Informant1 Surname",
        qualifier: "generated from prepending forename to surname"
      },
      usualAddress: "INFORMANT ADDRESS",
      qualification: "INFORMANT QUALIFICATION",
      signature: "INFORMANT SIGNATURE"
    }
  },
  systemNumber: 12345,
  id: 98765,
  date: "2020-09-23",
  registrarSignature: "Registrar signature",
  status: {
    potentiallyFictitiousBirth: false,
    correction: "None",
    cancelled: false,
    blockedRegistration: false,
    marginalNote: "Marginal Note",
    reRegistered: false
  },
  previousRegistration: {
    date: "2020-05-23",
    systemNumber: 3455667
  }
}

const redactedBirthData = {
  location: {
    name: "Registration District, Subdistrict town, Adminshire",
    administrativeArea: "Adminshire",
    subDistrict: "Subdistrict town",
    nameQualifier: "generated by concatenating registrationDistrict, subDistrict and administrativeArea",
    registrationDistrict: "Registration District"
  },
  subjects: {
    child: {
      originalName: {
        givenName: null,
        surname: null,
        fullName: null,
        qualifier: null
      },
      name: {
        givenName: "Expensive",
        surname: "Mistake",
        fullName: "Expensive Mistake",
        qualifier: "generated from prepending forename to surname"
      },
      dateOfBirth: "2020-09-23",
      sex: "Male",
      birthplace: "Bath"
    },
    father: {
      name: {
        givenName: "FATHER FORENAME",
        surname: "FATHER SURNAME",
        fullName: "FATHER FORENAME FATHER SURNAME",
        qualifier: "generated from prepending forename to surname"
      },
      birthplace: "BRISTOL",
      occupation: null
    },
    mother: {
      name: {
        givenName: "MOTHER FORENAME",
        surname: "MOTHER SURNAME",
        fullName: "MOTHER FORENAME MOTHER SURNAME",
        qualifier: "generated from prepending forename to surname"
      },
      birthplace: "Exeter",
      occupation: null,
      maidenSurname: "MAIDEN SURNAME",
      marriageSurname: "MARRIAGE SURNAME",
      usualAddress: null
    },
    informant: {
      name: {
        givenName: null,
        surname: null,
        fullName: null,
        qualifier: null
      },
      usualAddress: null,
      qualification: "INFORMANT QUALIFICATION",
      signature: null
    }
  },
  systemNumber: 12345,
  id: 98765,
  date: "2020-09-23",
  registrarSignature: null,
  status: {
    potentiallyFictitiousBirth: false,
    correction: "None",
    cancelled: false,
    blockedRegistration: false,
    marginalNote: "Marginal Note",
    reRegistered: false
  },
  previousRegistration: {
    date: "2020-05-23",
    systemNumber: 3455667
  }
}

const birthDataBlockedRecord = {
  ...birthData,
  status: {
    ...birthData.status,
    blockedRegistration: true
  }
}

const blockedRecordBirthData = {
  location: {
    name: null,
    administrativeArea: null,
    subDistrict: null,
    nameQualifier: null,
    registrationDistrict: null
  },
  subjects: {
    child: {
      originalName: {
        givenName: null,
        surname: null,
        fullName: null,
        qualifier: null
      },
      name: {
        givenName: null,
        surname: null,
        fullName: null,
        qualifier: null
      },
      dateOfBirth: null,
      sex: null,
      birthplace: null
    },
    father: {
      name: {
        givenName: null,
        surname: null,
        fullName: null,
        qualifier: null
      },
      birthplace: null,
      occupation: null
    },
    mother: {
      name: {
        givenName: null,
        surname: null,
        fullName: null,
        qualifier: null
      },
      birthplace: null,
      occupation: null,
      maidenSurname: null,
      marriageSurname: null,
      usualAddress: null
    },
    informant: {
      name: {
        givenName: null,
        surname: null,
        fullName: null,
        qualifier: null
      },
      usualAddress: null,
      qualification: null,
      signature: null
    }
  },
  systemNumber: 12345,
  id: 98765,
  date: null,
  registrarSignature: null,
  status: {
    potentiallyFictitiousBirth: null,
    correction: null,
    cancelled: null,
    blockedRegistration: true,
    marginalNote: null,
    reRegistered: null
  },
  previousRegistration: {
    date: null,
    systemNumber: null
  }
}

describe('censor birth function', () => {
  it('should be a function', () => {
    expect(censorBirthV0).to.be.a('function')
  })
  describe('when the record is NOT blocked', () => {
    it('should return the full birth data if role has full access', () => {
      expect(censorBirthV0(Object.assign({}, birthData), roleWithFullAccess))
        .to.deep.equal(birthData)
    })
    it('should return redacted birth data if role has not got full access', () => {
      expect(censorBirthV0(Object.assign({}, birthData), roleWithoutFullAccess))
        .to.deep.equal(redactedBirthData)
    })
  })
  describe('when the record IS BLOCKED', () => {
    it('should return null on relevant blocked record fields, with a role that has full access', () => {
      expect(censorBirthV0(Object.assign({}, birthDataBlockedRecord), roleWithFullAccess))
        .to.deep.equal(blockedRecordBirthData)
    })
    it('should return null on relevant blocked record fields, with a role that has NOT got full access', () => {
      expect(censorBirthV0(Object.assign({}, birthDataBlockedRecord), roleWithoutFullAccess))
        .to.deep.equal(blockedRecordBirthData)
    })
  })
})
