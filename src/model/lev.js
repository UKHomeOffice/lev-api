'use strict';

const db = require('../lib/db.js');

const joinNames = arr =>
      arr.filter(e => e).join(' ').trim();

const convertDate = d =>
      d === undefined ? undefined
      : d.split('/').reverse().join('-');

const record2Object = r => {
  for(let k in r) {
    if(r.hasOwnProperty(k) && r[k] === null) {
      delete r[k];
    }
  }

  const childOriginalGivenName = joinNames([r.childoriginalgivenname1, r.childoriginalgivenname2, r.childoriginalgivenname3, r.childoriginalgivenname4]) || undefined;
  const childCurrentGivenName = joinNames([r.childcurrentgivenname1, r.childcurrentgivenname2, r.childcurrentgivenname3, r.childcurrentgivenname4]) || undefined;
  const fatherGivenName = joinNames([r.fathergivenname1, r.fathergivenname2, r.fathergivenname3, r.fathergivenname4]) || undefined;
  const motherGivenName = joinNames([r.mothergivenname1, r.mothergivenname2, r.mothergivenname3, r.mothergivenname4]) || undefined;
  const childOriginalFullName = childOriginalGivenName && joinNames([childOriginalGivenName, r.childSurname]) || undefined;
  const childCurrentFullName = joinNames([childCurrentGivenName, r.childsurname]) || undefined;
  const fatherFullName = joinNames([fatherGivenName, r.fathersurname]) || undefined;
  const motherFullName = joinNames([motherGivenName, r.mothersurname]) || undefined;
  const informantFullName = r.informantsurname && joinNames([r.informantgivenname, r.informantsurname]) || undefined;

  return {
    location: {
      name: r.registrationdistrict + ', ' + r.subdistrict + ', ' + r.administrativearea,
      administrativeArea: r.administrativearea,
      subDistrict: r.subdistrict,
      nameQualifier: 'generated by concatenating registrationDistrict, subDistrict and administrativeArea',
      registrationDistrict: r.registrationdistrict
    },
    subjects: {
      child: {
        originalName: {
          givenName: childOriginalGivenName && childOriginalGivenName,
          surname: childOriginalGivenName && r.childsurname,
          fullName: childOriginalFullName,
          qualifier: childOriginalFullName && 'generated from prepending forename to surname'
        },
        name: {
          givenName: childCurrentGivenName,
          surname: r.childsurname,
          fullName: childCurrentFullName,
          qualifier: childCurrentFullName && 'generated from prepending forename to surname'
        },
        dateOfBirth: convertDate(r.childdob),
        sex: r.childsex,
        birthplace: r.childbirthplace
      },
      father: {
        name: {
          givenName: fatherGivenName,
          surname: r.fathersurname,
          fullName: fatherFullName,
          qualifier: fatherFullName && 'generated from prepending forename to surname'
        },
        birthplace: r.fatherbirthplace,
        occupation: r.fatheroccupation
      },
      mother: {
        name: {
          givenName: motherGivenName,
          surname: r.mothersurname,
          fullName: motherFullName,
          qualifier: motherFullName && 'generated from prepending forename to surname'
        },
        birthplace: r.motherbirthplace,
        occupation: r.motheroccupation,
        maidenSurname: r.mothermaidensurname,
        marriageSurname: r.mothermarriagesurname,
        usualAddress: r.motherusualaddress
      },
      informant: {
        name: {
          givenName: r.informantgivenname,
          surname: r.informantsurname,
          fullName: informantFullName,
          qualifier: informantFullName && 'generated from prepending forename to surname'
        },
        usualAddress: r.informantusualaddress,
        qualification: r.informantqualification,
        signature: r.informantsignature
      }
    },
    systemNumber: r.systemnumber && Number(r.systemnumber),
    id: Number(r.id),
    date: convertDate(r.date),
    registrarSignature: r.registrarsignature,
    status: {
      potentiallyFictitiousBirth: r.fictitiousbirth == 1 || r.fictitiousbirth == 2,
      correction: r.formalcorrectiontype == 1
        ? 'Typographical'
        : r.formalcorrectiontype == 2
        ? 'Simple clerical'
        : r.formalcorrectiontype == 3
        ? 'Complex clerical'
        : r.formalcorrectiontype == 4
        ? 'Error of fact'
        : 'None',
      cancelled: r.indupdatetype == 8 && r.cancelledtype == 1 && r.flcancelled == 'Y',
      blockedRegistration: r.blockedregistration !== 'N',
      marginalNote: r.marginalnotreason == 1
        ? 'Re-registered'
        : r.marginalnotreason == 2
        ? 'Court order in place'
        : r.marginalnotreason == 3
        ? 'Court order revoked'
        : r.marginalnotreason == 4
        ? 'Other'
        : 'None',
      reRegistered: r.reregistered == 1
        ? 'Father added'
        : r.reregistered == 2
        ? 'Subsequently married'
        : r.reregistered == 3
        ? 'Father modified'
        : r.reregistered == 4
        ? 'Replacement registration'
        : r.reregistered == 5
        ? 'Replacement registration'
        : r.reregistered == 6
        ? 'Other'
        : 'None'
    },
    previousRegistration: {
      date: convertDate(r.prevregdate),
      systemNumber: r.prevregsystemnumber && Number(r.prevregsystemnumber)
    }
  };
};

const selectFragment = 'SELECT birth_rec_id AS id,\n'
      + '       regis_id AS systemNumber,\n'
      + '       regis_date AS date,\n'
      + '       registrar_signature AS registrarSignature,\n'
      + '       regis_district_name AS registrationDistrict,\n'
      + '       regis_sub_district_name AS subDistrict,\n'
      + '       regis_admin_area_name AS administrativeArea,\n'
      + '       child_surname AS childSurname,\n'
      + '       birthplace_address AS childBirthplace,\n'
      + '       dob AS childDob,\n'
      + '       child_sex AS childSex,\n'
      + '       child_forename1_c AS childCurrentGivenName1,\n'
      + '       child_forename2_c AS childCurrentGivenName2,\n'
      + '       child_forename3_c AS childCurrentGivenName3,\n'
      + '       child_forename4_c AS childCurrentGivenName4,\n'
      + '       child_forename1_o AS childOldGivenName1,\n'
      + '       child_forename2_o AS childOldGivenName2,\n'
      + '       child_forename3_o AS childOldGivenName3,\n'
      + '       child_forename4_o AS childOldGivenName4,\n'
      + '       father_forename1 AS fatherGivenName1,\n'
      + '       father_forename2 AS fatherGivenName2,\n'
      + '       father_forename3 AS fatherGivenName3,\n'
      + '       father_forename4 AS fatherGivenName4,\n'
      + '       father_surname AS fatherSurname,\n'
      + '       father_birthplace AS fatherBirthplace,\n'
      + '       father_occupation AS fatherOccupation,\n'
      + '       mother_forename1 AS motherGivenName1,\n'
      + '       mother_forename2 AS motherGivenName2,\n'
      + '       mother_forename3 AS motherGivenName3,\n'
      + '       mother_forename4 AS motherGivenName4,\n'
      + '       mother_surname AS motherSurname,\n'
      + '       mother_birthplace AS motherBirthplace,\n'
      + '       mother_occupation AS motherOccupation,\n'
      + '       mother_surname_maiden AS motherMaidenSurname,\n'
      + '       mother_surname_marriage AS motherMarriageSurname,\n'
      + '       mother_address AS motherUsualAddress,\n'
      + '       informant1_forenames AS informantGivenName,\n'
      + '       informant1_surname AS informantSurname,\n'
      + '       informant1_address AS informantUsualAddress,\n'
      + '       informant_qualification_text AS informantQualification,\n'
      + '       informant_signature AS informantSignature,\n'
      + '       ind_blocked_registration AS blockedRegistration,\n'
      + '       ind_update_type AS indUpdateType,\n'
      + '       cancelled_type AS cancelledType,\n'
      + '       fl_cancelled AS flCancelled,\n'
      + '       marginal_not_reason AS marginalNotReason,\n'
      + '       ind_fictitious_birth AS fictitiousBirth,\n'
      + '       re_regis_type AS reRegistered,\n'
      + '       formal_correction_type AS formalCorrectionType,\n'
      + '       rereg_prev_regis_date AS prevRegDate,\n'
      + '       rereg_previous_regis_id AS prevRegSystemNumber\n'
      + 'FROM lev\n';

module.exports = {
  read: id =>
    db.oneOrNone(selectFragment + 'WHERE regis_id = $1', [id], r => r && record2Object(r)),
  search: (dob, surname, forename1, forename2, forename3, forename4) => {
    const initial = {
      n: 2,
      v: ''
    };
    const reducer = (acc, e) => ({
      n: acc.n + 1,
      v: e ? acc.v + ' AND child_forename' + acc.n + '_c = $' + (acc.n + 2)
        : acc.v
    });
    const middleNameFragment = [forename2, forename3, forename4].reduce(reducer, initial).v;

    return db.any(selectFragment + 'WHERE child_surname = $1 AND dob = $2 AND child_forename1_c = $3' + middleNameFragment + ' LIMIT 25', [surname, dob.format('DD/MM/YYYY'), forename1, forename2, forename3, forename4])
      .then(r => r.map(record2Object));
  }
};
